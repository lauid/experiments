// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BothStreamClient is the client API for BothStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BothStreamClient interface {
	// 双向流式rpc，同时在请求参数前和响应参数前加上stream
	Conversations(ctx context.Context, opts ...grpc.CallOption) (BothStream_ConversationsClient, error)
}

type bothStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewBothStreamClient(cc grpc.ClientConnInterface) BothStreamClient {
	return &bothStreamClient{cc}
}

func (c *bothStreamClient) Conversations(ctx context.Context, opts ...grpc.CallOption) (BothStream_ConversationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BothStream_ServiceDesc.Streams[0], "/demo2.BothStream/Conversations", opts...)
	if err != nil {
		return nil, err
	}
	x := &bothStreamConversationsClient{stream}
	return x, nil
}

type BothStream_ConversationsClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type bothStreamConversationsClient struct {
	grpc.ClientStream
}

func (x *bothStreamConversationsClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bothStreamConversationsClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothStreamServer is the server API for BothStream service.
// All implementations must embed UnimplementedBothStreamServer
// for forward compatibility
type BothStreamServer interface {
	// 双向流式rpc，同时在请求参数前和响应参数前加上stream
	Conversations(BothStream_ConversationsServer) error
	mustEmbedUnimplementedBothStreamServer()
}

// UnimplementedBothStreamServer must be embedded to have forward compatible implementations.
type UnimplementedBothStreamServer struct {
}

func (UnimplementedBothStreamServer) Conversations(BothStream_ConversationsServer) error {
	return status.Errorf(codes.Unimplemented, "method Conversations not implemented")
}
func (UnimplementedBothStreamServer) mustEmbedUnimplementedBothStreamServer() {}

// UnsafeBothStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BothStreamServer will
// result in compilation errors.
type UnsafeBothStreamServer interface {
	mustEmbedUnimplementedBothStreamServer()
}

func RegisterBothStreamServer(s grpc.ServiceRegistrar, srv BothStreamServer) {
	s.RegisterService(&BothStream_ServiceDesc, srv)
}

func _BothStream_Conversations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BothStreamServer).Conversations(&bothStreamConversationsServer{stream})
}

type BothStream_ConversationsServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type bothStreamConversationsServer struct {
	grpc.ServerStream
}

func (x *bothStreamConversationsServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bothStreamConversationsServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothStream_ServiceDesc is the grpc.ServiceDesc for BothStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BothStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo2.BothStream",
	HandlerType: (*BothStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conversations",
			Handler:       _BothStream_Conversations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/pb/both_stream.proto",
}
