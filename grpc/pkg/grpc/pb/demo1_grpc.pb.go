// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Demo1ServiceClient is the client API for Demo1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Demo1ServiceClient interface {
	ServerStreamingMethod(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (Demo1Service_ServerStreamingMethodClient, error)
}

type demo1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemo1ServiceClient(cc grpc.ClientConnInterface) Demo1ServiceClient {
	return &demo1ServiceClient{cc}
}

func (c *demo1ServiceClient) ServerStreamingMethod(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (Demo1Service_ServerStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo1Service_ServiceDesc.Streams[0], "/demo1.Demo1Service/ServerStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &demo1ServiceServerStreamingMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo1Service_ServerStreamingMethodClient interface {
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type demo1ServiceServerStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *demo1ServiceServerStreamingMethodClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Demo1ServiceServer is the server API for Demo1Service service.
// All implementations must embed UnimplementedDemo1ServiceServer
// for forward compatibility
type Demo1ServiceServer interface {
	ServerStreamingMethod(*RequestMessage, Demo1Service_ServerStreamingMethodServer) error
	mustEmbedUnimplementedDemo1ServiceServer()
}

// UnimplementedDemo1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemo1ServiceServer struct {
}

func (UnimplementedDemo1ServiceServer) ServerStreamingMethod(*RequestMessage, Demo1Service_ServerStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingMethod not implemented")
}
func (UnimplementedDemo1ServiceServer) mustEmbedUnimplementedDemo1ServiceServer() {}

// UnsafeDemo1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Demo1ServiceServer will
// result in compilation errors.
type UnsafeDemo1ServiceServer interface {
	mustEmbedUnimplementedDemo1ServiceServer()
}

func RegisterDemo1ServiceServer(s grpc.ServiceRegistrar, srv Demo1ServiceServer) {
	s.RegisterService(&Demo1Service_ServiceDesc, srv)
}

func _Demo1Service_ServerStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Demo1ServiceServer).ServerStreamingMethod(m, &demo1ServiceServerStreamingMethodServer{stream})
}

type Demo1Service_ServerStreamingMethodServer interface {
	Send(*ResponseMessage) error
	grpc.ServerStream
}

type demo1ServiceServerStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *demo1ServiceServerStreamingMethodServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Demo1Service_ServiceDesc is the grpc.ServiceDesc for Demo1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo1.Demo1Service",
	HandlerType: (*Demo1ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingMethod",
			Handler:       _Demo1Service_ServerStreamingMethod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/pb/demo1.proto",
}
